# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

type Contacts {
  email: String
  mastodon: String
  phone: String
  website: String
}

type Exhibit {
  exhibitor: Exhibitor!
  id: Int!
  table: Table
  text: String
  title: String!
}

type Exhibition {
  hostMatch: String!
  id: Int!
  key: String!
  title: String!
}

type Exhibitor {
  exhibits: [Exhibit]
  id: Int!
  tables: [Table]
  user: User!
}

type Mutation {
  approveRegistration(id: Int!, siteUrl: String!): Boolean
  assignTable(exhibitorId: Int!, number: Int!): Table
  claimTable(number: Int!): Table
  createExhibit(table: Int, text: String, title: String!): Exhibit
  createRegistration(
    data: JSON
    email: String!
    message: String
    name: String!
    nickname: String!
    topic: String!
  ): Registration
  deleteRegistration(id: Int!): Boolean
  login(email: String!, password: String!): User
  rejectRegistration(id: Int!): Boolean
  releaseTable(number: Int!): Table
  requestPasswordReset(email: String!, resetUrl: String!): Boolean
  resetPassword(password: String!, token: String!): Boolean
  updateExhibit(id: Int!, table: Int, text: String, title: String): Exhibit
  updateRegistration(
    id: Int!
    notes: String
    status: RegistrationStatus
  ): Registration
}

type Query {
  getExhibit(id: Int!): Exhibit
  getExhibition(id: Int!): Exhibition
  getExhibitions: [Exhibition!]
  getExhibitor(id: Int!): Exhibitor
  getExhibitors: [Exhibitor!]
  getExhibits: [Exhibit!]
  getRegistration(id: Int!): Registration
  getRegistrations: [Registration!]
  getTable(number: Int!): Table
  getTables: [Table!]
  getUser(id: Int!): User
  getUsers: [User!]
}

type Registration {
  data: JSON
  email: String!
  id: Int!
  message: String
  name: String!
  nickname: String
  notes: String
  status: RegistrationStatus!
  topic: String!
}

type Table {
  exhibitor: Exhibitor
  id: Int!
  number: Int!
}

type User {
  bio: String
  contacts: Contacts
  email: String!
  fullName: String
  id: Int!
  isAdministrator: Boolean
  nickname: String
}

enum RegistrationStatus {
  approved
  inProgress
  new
  rejected
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
